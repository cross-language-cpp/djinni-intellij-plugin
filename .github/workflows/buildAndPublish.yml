# GitHub Actions Workflow created for testing and publishing the plugin in following steps:
# - validate Gradle Wrapper,
# - run test and verifyPlugin tasks,
# - run buildPlugin task and prepare artifact for the further tests,
# - run IntelliJ Plugin Verifier,
# - publish plugin if the workflow was triggered by a release

# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action


on:
  push:
    branches:
      - '**'
  pull_request:
  release:
    types: [released]

name: Build

jobs:
  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper Validation
    runs-on: ubuntu-latest
    steps:
    - name: Fetch Sources
      uses: actions/checkout@v2
    - name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:
    - name: Setup Java 1.8 environment for the next steps
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Fetch Sources
      uses: actions/checkout@v2
    - name: Setup Gradle Dependencies Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
    - name: Setup Gradle Wrapper Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
    - name: Run Checks
      run: ./gradlew check
    - name: Verify Plugin
      run: ./gradlew verifyPlugin

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Setup Java 1.8 environment for the next steps
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Fetch Sources
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup Gradle Dependencies Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
    - name: Setup Gradle Wrapper Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
    - name: Build Plugin
      run: ./gradlew buildPlugin
    - name: Determine Artifact Path
      run: echo "ARTIFACT_PATH=$(ls ./build/distributions/*.zip)" >> $GITHUB_ENV
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: plugin-artifact
        path: ${{ env.ARTIFACT_PATH }}

  # Verify built plugin using IntelliJ Plugin Verifier tool
  # Requires build job to be passed
  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: plugin-artifact
        path: ./build/distributions/
    - name: Verify Plugin
      id: verify
      uses: ChrisCarini/intellij-platform-plugin-verifier-action@v0.0.2
      with:
        plugin-location: ./build/distributions/*.zip
        ide-versions: ideaIC:2020.3
    - name: Print Verify Logs
      env:
        OUTPUT_LOG: ${{ steps.verify.outputs.verification-output-log-filename }}
      run: |
        echo "The verifier log file [$OUTPUT_LOG] contents : " ;
        cat $OUTPUT_LOG
  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: verify
    steps:
    - name: Setup Java 1.8 environment for the next steps
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Fetch Sources
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: plugin-artifact
        path: ./build/distributions/
    - name: Determine Artifact Name
      run: echo "ARTIFACT_NAME=$(ls ./build/distributions/)" >> $GITHUB_ENV
    - name: Determine Upload Url
      run: echo "UPLOAD_URL=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.upload_url')" >> $GITHUB_ENV
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./build/distributions/${{ env.ARTIFACT_NAME }}
        asset_name: ${{ env.ARTIFACT_NAME }}
        asset_content_type: application/zip
    - name: Publish Plugin to Jetbrains Marketplace
      env:
        PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
      run: ./gradlew publishPlugin
