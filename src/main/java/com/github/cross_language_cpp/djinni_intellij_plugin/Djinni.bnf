/*
 * Copyright 2015 Dropbox, Inc.
 * Copyright 2020 cross-language-cpp
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  parserClass="com.github.cross_language_cpp.djinni_intellij_plugin.parser.DjinniParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Djinni"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.cross_language_cpp.djinni_intellij_plugin.psi"
  psiImplPackage="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl"

  elementTypeHolderClass="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniTypes"
  elementTypeClass="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniElementType"
  tokenTypeClass="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniTokenType"

  psiImplUtilClass="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniPsiImplUtil"
  generateTokenAccessors=true

  tokens = [
    EQ="="
    COLON=":"
    SEMICOLON=";"
    LIST_SEPARATOR=","
    PLUS="+"
    LEFT_BLOCK_BRACE="{"
    RIGHT_BLOCK_BRACE="}"
    LEFT_GENERICS_BRACE="<"
    RIGHT_GENERICS_BRACE=">"
    LEFT_PARAM_BRACE="("
    RIGHT_PARAM_BRACE=")"
    AT="@"

    space="regexp:\s+"
    comment="regexp:#.*"
    enum="enum"
    flags="flags"
    record="record"
    eq_keyword="eq"
    ord="ord"
    interface="interface"
    static="static"
    const="const"
    extern="extern"
    import="import"
    string_literal="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    number_literal="regexp:-?(\d+(\.\d*)?)|(\.\d+)"
    identifier="regexp:\p{Alpha}\w*"
    text="regexp:\w+"
  ]
}

djinniFile ::= item_*

private item_ ::= importStatement | externStatement | typeDefinition


typeDefinition ::= identifier EQ typeDescription {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniNamedElementImpl"
  implements="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniNamedElement"
  methods=[getTypeName getDjinniType getName setName getNameIdentifier getPresentation]
}

private typeDescription ::= enumDescription | flagsDescription | recordDescription | interfaceDescription

generator ::= (PLUS 'c') | (PLUS 'j') | (PLUS 'o')

// enum

private enumDescription ::= enumTypeVariant LEFT_BLOCK_BRACE enumMember* RIGHT_BLOCK_BRACE

enumTypeVariant ::= enum

enumMember ::= enumValue SEMICOLON

enumValue ::= identifier {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniReferenceImpl"
  implements="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniNamedElement"
  methods=[getName setName getNameIdentifier]
}

// flags.

private flagsDescription ::= flagsTypeVariant LEFT_BLOCK_BRACE flagsMember* RIGHT_BLOCK_BRACE

flagsTypeVariant ::= flags

flagsMember ::= flagsValue [ EQ ( 'all' | 'none' ) ] SEMICOLON

flagsValue ::= identifier {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniReferenceImpl"
  implements="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniNamedElement"
  methods=[getName setName getNameIdentifier]
}

// record

private recordDescription ::= recordTypeVariant LEFT_BLOCK_BRACE recordMember* RIGHT_BLOCK_BRACE ['deriving' LEFT_PARAM_BRACE derivingParamList RIGHT_PARAM_BRACE]

recordTypeVariant ::= record generator*

derivingParamList ::= (derivingParam ',' derivingParamList) | derivingParam

derivingParam ::= eq_keyword | ord

recordMember ::= constMember | recordMemberVariable

recordMemberVariable ::= identifier COLON typeReference SEMICOLON

// interface.

private interfaceDescription ::= interfaceTypeVariant LEFT_BLOCK_BRACE interfaceMember* RIGHT_BLOCK_BRACE

interfaceTypeVariant ::= interface generator*

interfaceMember ::= constMember | interfaceMemberFunction

interfaceMemberFunction ::= [static] identifier LEFT_PARAM_BRACE interfaceFunctionParamList? RIGHT_PARAM_BRACE [COLON typeReference] SEMICOLON

interfaceFunctionParamList ::=  (interfaceFunctionParam ',' interfaceFunctionParamList) | interfaceFunctionParam

interfaceFunctionParam ::= identifier COLON typeReference

//
// type references
//
typeReference ::= predefinedType | identifier {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniReferenceImpl"
  implements="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniNamedElement"
  methods=[getName setName getNameIdentifier]
}

predefinedType ::= basicType | genericBasicType

basicType ::= 'bool' | 'i8' | 'i16' | 'i32' | 'i64' | 'f32' | 'f64' | 'string' | 'binary' | 'date'

genericBasicType ::= genericBasicTypeSingleParameter | genericBasicTypeDualParameter

// The [space] there is not really part of the definition. It just needed to be used somewhere to show up in DjinniTypes.java :-(
genericBasicTypeSingleParameter ::= (list | set | optional) !space LEFT_GENERICS_BRACE typeReference RIGHT_GENERICS_BRACE
//genericBasicTypeSingleParameter ::= (list | set | optional) LEFT_GENERICS_BRACE typeReference RIGHT_GENERICS_BRACE

genericBasicTypeDualParameter ::= map LEFT_GENERICS_BRACE typeReference LIST_SEPARATOR typeReference RIGHT_GENERICS_BRACE

//
// const definitions
//
constMember ::= const constNamedValue COLON typeReference EQ constValue SEMICOLON

constNamedValue ::= identifier {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniReferenceImpl"
  implements="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniNamedElement"
  methods=[getName setName getNameIdentifier]
}

constValue ::= string_literal | number_literal | constReference | constRecord

constReference ::= identifier {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniReferenceImpl"
  implements="com.github.cross_language_cpp.djinni_intellij_plugin.psi.DjinniNamedElement"
  methods=[getName setName getNameIdentifier]
}

private constRecord ::= LEFT_BLOCK_BRACE constRecordMemberList RIGHT_BLOCK_BRACE

private constRecordMemberList ::= (constRecordMemberElement ',' constRecordMemberList) | (constRecordMemberElement [','])

constRecordMemberElement ::= identifier EQ constValue

//
// import
//
importStatement ::= AT import string_literal {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniImportStatementBaseImpl"
  implements="com.intellij.psi.PsiNamedElement"
  methods=[getName setName getRangeOfPath getPath]
}

//
// extern
//
externStatement ::= AT extern string_literal {
  mixin="com.github.cross_language_cpp.djinni_intellij_plugin.psi.impl.DjinniImportStatementBaseImpl"
  implements="com.intellij.psi.PsiNamedElement"
  methods=[getName setName getRangeOfPath getPath]
}
